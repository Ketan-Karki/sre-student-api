# ============================================================================
# Global Settings
# ============================================================================
# These settings are common across all environments and can be overridden in
# environment-specific values files.
# ============================================================================

# Global name overrides
nameOverride: ""
fullnameOverride: ""

# ============================================================================
# Image Configuration
# ============================================================================
# Configure container images and pull secrets for all environments
# ============================================================================

# Image credentials for private registry access
imageCredentials:
  registry: ""
  username: ""
  password: ""
  email: ""
  # Set to true to create a Secret for pulling images from private registries
  createSecret: false
  secretName: "registry-credentials"

# ============================================================================
# Namespace Configuration
# ============================================================================
# Default namespace settings (override in environment-specific values)
# ============================================================================

namespace:
  create: true
  name: "student-api"

# ============================================================================
# Student API Configuration
# ============================================================================
# Default configuration for the Student API application
# ============================================================================

studentApi:
  # Image configuration
  image:
    repository: nginx
    tag: 3d496de
    pullPolicy: IfNotPresent
  
  # Replica count
  replicas: 1
  
  # Resource requests and limits
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi
  
  # Service configuration
  service:
    type: ClusterIP
    port: 8080
    targetPort: 80
    selector:
      app: student-api  # Consistent label selector
  
  # Environment variables
  env: {}
  
  # Liveness and readiness probes
  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    
  readinessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  # Autoscaling configuration
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # Required for template compatibility
  metrics:
    enabled: false
    path: /metrics
    port: 8080

  # Add configuration for Blackbox monitoring
  configMap:
    name: nginx-direct-conf
    data:
      default.conf: |
        server {
          listen 80;
          location / { return 200 'Student API is working'; }
          location /health { return 200 '{"status":"ok"}'; }
          location /metrics { return 200 '# TYPE up gauge\nup 1\n'; }
        }

# ============================================================================
# Monitoring Configuration
# ============================================================================
# Blackbox Exporter for monitoring internal services
# ============================================================================

blackboxExporter:
  enabled: true
  name: blackbox-exporter
  
  # Image configuration
  image:
    repository: prom/blackbox-exporter
    tag: 3d496de
    pullPolicy: IfNotPresent
  
  # Resource requests and limits
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi
  
  # Service configuration
  service:
    type: NodePort
    port: 9115
    name: blackbox-exporter
    nodePort: 30115
    
  # Probes configuration
  probes:
    http_2xx:
      prober: http
      timeout: 5s
      http:
        valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
        valid_status_codes: [200]
        method: GET
        preferred_ip_protocol: "ip4"
        follow_redirects: true
    
    tcp_connect:
      prober: tcp
      timeout: 5s
      tcp:
        preferred_ip_protocol: "ip4"
  config:
    modules:
      # HTTP module that expects 2xx response
      http_2xx:
        prober: http
        timeout: 5s
        http:
          valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
          valid_status_codes: [200]
          method: GET
          preferred_ip_protocol: "ip4"
          follow_redirects: true
      # Health check module for API health endpoints
      http_health:
        prober: http
        timeout: 5s
        http:
          valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
          valid_status_codes: [200]
          method: GET
          preferred_ip_protocol: "ip4"
          fail_if_body_not_matches_regexp:
            - ".*status.*:.*ok.*"
      # TCP connection check
      tcp_connection:
        prober: tcp
        timeout: 5s
        tcp:
          preferred_ip_protocol: "ip4"
  # Updated targets with verified working endpoints
  targets:
    - name: student-api-health
      module: http_health
      url: "http://student-api:8080/health"
      interval: 30s
    - name: student-api-metrics
      module: http_2xx
      url: "http://student-api:8080/metrics"
      interval: 30s
    - name: postgres-tcp
      module: tcp_connection
      url: "postgres-service:5432"
      interval: 30s
    - name: nginx-tcp
      module: tcp_connection
      url: "nginx-service:80"
      interval: 30s
  # Service account, ConfigMap name and annotations
  serviceAccount:
    create: true
    name: "blackbox-exporter"
  configMapName: "blackbox-exporter-config"
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9115"
    prometheus.io/path: "/metrics"

# PostgreSQL configuration
postgres:
  image:
    repository: postgres
    tag: 3d496de
    pullPolicy: IfNotPresent
  replicas: 1
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi
  service:
    type: ClusterIP
    port: 5432
  persistence:
    enabled: true
    storageClass: "" # Empty string means use default storage class
    size: 1Gi
    # For emergency use - set to true to force emptyDir instead of PVC
    forceEmptyDir: true # Default to emptyDir for stability
    # PVC name will be generated based on release name

  # Database credentials
  database:
    name: api
    user: postgres
    password: postgres

  exporter:
    enabled: true
    image:
      repository: bitnami/postgres-exporter # More stable image
      tag: 3d496de
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
    # Prometheus annotations for service discovery
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9187"
      prometheus.io/path: "/metrics"

# NGINX configuration
nginx:
  enabled: true
  image:
    repository: nginx
    tag: 3d496de
    pullPolicy: IfNotPresent
  replicas: 1
  configMap:
    name: nginx-config
    data:
      nginx.conf: |
        events {
          worker_connections 1024;
        }
        http {
          upstream backend {
            server student-api.student-api.svc.cluster.local:8080;
          }
          server {
            listen 80;
            location / {
              proxy_pass http://backend;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
            }
            location /health {
              access_log off;
              return 200 '{"status":"ok"}';
              add_header Content-Type application/json;
            }
          }
        }
  service:
    type: LoadBalancer # Ensure NGINX is externally accessible
    port: 80
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb" # Example for AWS (optional)
