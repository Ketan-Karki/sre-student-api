apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "student-api.fullname" . }}
  namespace: {{ .Values.namespace.name }}
  labels:
    {{- include "student-api.labels" . | nindent 4 }}
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  replicas: {{ .Values.studentApi.replicas }}
  selector:
    matchLabels:
      {{- include "student-api.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "student-api.selectorLabels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.studentApi.metrics.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
        {{- end }}
    spec:
      {{- if .Values.imageCredentials.createSecret }}
      imagePullSecrets:
        - name: {{ .Values.imageCredentials.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ required "A valid studentApi.image.repository is required!" .Values.studentApi.image.repository }}:{{ required "A valid studentApi.image.tag is required!" .Values.studentApi.image.tag }}"
          imagePullPolicy: {{ .Values.studentApi.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            {{- toYaml .Values.studentApi.resources | nindent 12 }}
          env:
            - name: DATABASE_URL
              value: "postgres://{{ required "A valid postgres.database.user is required!" .Values.postgres.database.user }}:{{ required "A valid postgres.database.password is required!" .Values.postgres.database.password }}@postgres-service:{{ .Values.postgres.service.port }}/{{ required "A valid postgres.database.name is required!" .Values.postgres.database.name }}?sslmode=disable"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: {{ .Values.namespace.name }}
  labels:
    {{- include "student-api.labels" . | nindent 4 }}
    app: postgres
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "5"  # Ensure this runs after PVC creation
spec:
  replicas: {{ .Values.postgres.replicas }}
  selector:
    matchLabels:
      {{- include "student-api.selectorLabels" . | nindent 6 }}
      app: postgres
  template:
    metadata:
      labels:
        {{- include "student-api.selectorLabels" . | nindent 8 }}
        app: postgres
      annotations:
        {{- if .Values.postgres.exporter.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
        {{- end }}
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      securityContext:
        fsGroup: 999
      {{- if .Values.imageCredentials.createSecret }}
      imagePullSecrets:
        - name: {{ .Values.imageCredentials.secretName }}
      {{- end }}
      containers:
        - name: postgres
          image: "{{ required "A valid postgres.image.repository is required!" .Values.postgres.image.repository }}:{{ required "A valid postgres.image.tag is required!" .Values.postgres.image.tag }}"
          imagePullPolicy: {{ .Values.postgres.image.pullPolicy }}
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: {{ required "A valid postgres.database.name is required!" .Values.postgres.database.name }}
            - name: POSTGRES_USER
              value: {{ required "A valid postgres.database.user is required!" .Values.postgres.database.user }}
            - name: POSTGRES_PASSWORD
              value: {{ required "A valid postgres.database.password is required!" .Values.postgres.database.password }}
          resources:
            {{- toYaml .Values.postgres.resources | nindent 12 }}
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
        {{- if .Values.postgres.exporter.enabled }}
        - name: postgres-exporter
          image: "{{ .Values.postgres.exporter.image.repository }}:{{ .Values.postgres.exporter.image.tag }}"
          imagePullPolicy: {{ .Values.postgres.exporter.image.pullPolicy }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
          ports:
            - containerPort: 9187
              name: metrics
          env:
            - name: DATA_SOURCE_NAME
              value: "postgresql://{{ .Values.postgres.database.user }}:{{ .Values.postgres.database.password }}@localhost:5432/{{ .Values.postgres.database.name }}?sslmode=disable"
          resources:
            {{- toYaml .Values.postgres.exporter.resources | nindent 12 }}
          startupProbe:
            httpGet:
              path: /health
              port: metrics
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: metrics
            initialDelaySeconds: 0
            timeoutSeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health  
              port: metrics
            initialDelaySeconds: 0
            timeoutSeconds: 5
            periodSeconds: 10
        {{- end }}
      volumes:
        - name: postgres-storage
          {{- if .Values.postgres.persistence.forceEmptyDir }}
          emptyDir: {}
          {{- else }}
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-postgres-data
          {{- end }}
{{- if .Values.nginx.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: {{ .Values.namespace.name }}
  labels:
    {{- include "student-api.labels" . | nindent 4 }}
    app: nginx
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  replicas: {{ .Values.nginx.replicas }}
  selector:
    matchLabels:
      {{- include "student-api.selectorLabels" . | nindent 6 }}
      app: nginx
  template:
    metadata:
      labels:
        {{- include "student-api.selectorLabels" . | nindent 8 }}
        app: nginx
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      {{- if .Values.imageCredentials.createSecret }}
      imagePullSecrets:
        - name: {{ .Values.imageCredentials.secretName }}
      {{- end }}
      containers:
        - name: nginx
          image: "{{ required "A valid nginx.image.repository is required!" .Values.nginx.image.repository }}:{{ required "A valid nginx.image.tag is required!" .Values.nginx.image.tag }}"
          imagePullPolicy: {{ .Values.nginx.image.pullPolicy }}
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: nginx-config
          configMap:
            name: {{ required "A valid nginx.configMap.name is required!" .Values.nginx.configMap.name }}
{{- end }}
